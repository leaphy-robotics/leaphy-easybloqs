import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import type { AppState, AppThunk } from '../../redux/store'

export interface BlocklyState {
    robot: 'orig' | 'flitz' | 'click'
    toolbox: {},
    status: 'idle' | 'loading' | 'failed'
}

const initialState: BlocklyState = {
    robot: 'orig',
    toolbox: {},
    status: 'idle',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadToolboxAsync = createAsyncThunk(
    'blockly/toolbox',
    async (robot: 'orig' | 'flitz' | 'click') => {
        // Dynamically load the right file
        // Return it
        return {};
    }
)

const sliceOptions = {
    name: 'blockly',
    initialState,
    reducers: {
        increment: (state: BlocklyState) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            //state.value += 1
        },
        decrement: (state: BlocklyState) => {
            //state.value -= 1
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        setRobot: (state: BlocklyState, action: PayloadAction<'orig' | 'flitz' | 'click'>) => {
            state.robot = action.payload
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder: any) => {
        builder
            .addCase(incrementAsync.pending, (state: BlocklyState) => {
                state.status = 'loading'
            })
            .addCase(incrementAsync.fulfilled, (state: BlocklyState, action: PayloadAction<number>) => {
                state.status = 'idle'
                //state.value += action.payload
            })
    },
}

export const blocklySlice = createSlice(sliceOptions);

export const { increment, decrement, setRobot } = blocklySlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectRobot = (state: AppState) => state.blockly.robot;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentRobot = selectRobot(getState())
    if (currentRobot === 'orig') {
      //dispatch(incrementByAmount(amount))
    }
  }

export default blocklySlice.reducer